/* The following code was generated by JFlex 1.4.3 on 02/08/11 12:06 */

/* Derived from sql.flex by Gian Perrone for the BigMC project.
 *
 * Copyright 2011 Gian Perrone
 * Copyright 2008 Ayman Al-Sairafi ayman.alsairafi@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License
 *       at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jsyntaxpane.lexers;

import jsyntaxpane.Token;
import jsyntaxpane.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 02/08/11 12:06 from the specification file
 * <tt>/Users/gdpe/Documents/bigmc-gui/contrib/jsyntaxpane/jsyntaxpane/src/main/jflex/jsyntaxpane/lexers/bgm.flex</tt>
 */
public final class BgmLexer extends DefaultJFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\3\1\2\1\0\1\3\1\1\16\6\4\0\1\3\1\32"+
    "\1\0\1\4\1\5\1\11\1\36\1\0\1\32\1\32\2\0\1\32"+
    "\1\33\1\32\1\0\1\7\11\10\1\32\1\32\1\32\1\32\1\34"+
    "\2\0\32\5\1\32\1\0\1\32\1\0\1\5\1\0\1\21\1\5"+
    "\1\23\1\5\1\14\1\37\1\5\1\30\1\12\1\5\1\31\1\40"+
    "\1\22\1\13\1\16\1\25\1\5\1\15\1\26\1\20\1\17\1\24"+
    "\1\5\1\41\1\27\1\5\1\0\1\35\2\0\41\6\2\0\4\5"+
    "\4\0\1\5\2\0\1\6\7\0\1\5\4\0\1\5\5\0\27\5"+
    "\1\0\37\5\1\0\u013f\5\31\0\162\5\4\0\14\5\16\0\5\5"+
    "\11\0\1\5\21\0\130\6\5\0\23\6\12\0\1\5\13\0\1\5"+
    "\1\0\3\5\1\0\1\5\1\0\24\5\1\0\54\5\1\0\46\5"+
    "\1\0\5\5\4\0\202\5\1\0\4\6\3\0\105\5\1\0\46\5"+
    "\2\0\2\5\6\0\20\5\41\0\46\5\2\0\1\5\7\0\47\5"+
    "\11\0\21\6\1\0\27\6\1\0\3\6\1\0\1\6\1\0\2\6"+
    "\1\0\1\6\13\0\33\5\5\0\3\5\15\0\4\6\14\0\6\6"+
    "\13\0\32\5\5\0\13\5\16\6\7\0\12\6\4\0\2\5\1\6"+
    "\143\5\1\0\1\5\10\6\1\0\6\6\2\5\2\6\1\0\4\6"+
    "\2\5\12\6\3\5\2\0\1\5\17\0\1\6\1\5\1\6\36\5"+
    "\33\6\2\0\3\5\60\0\46\5\13\6\1\5\u014f\0\3\6\66\5"+
    "\2\0\1\6\1\5\20\6\2\0\1\5\4\6\3\0\12\5\2\6"+
    "\2\0\12\6\21\0\3\6\1\0\10\5\2\0\2\5\2\0\26\5"+
    "\1\0\7\5\1\0\1\5\3\0\4\5\2\0\1\6\1\5\7\6"+
    "\2\0\2\6\2\0\3\6\11\0\1\6\4\0\2\5\1\0\3\5"+
    "\2\6\2\0\12\6\4\5\15\0\3\6\1\0\6\5\4\0\2\5"+
    "\2\0\26\5\1\0\7\5\1\0\2\5\1\0\2\5\1\0\2\5"+
    "\2\0\1\6\1\0\5\6\4\0\2\6\2\0\3\6\13\0\4\5"+
    "\1\0\1\5\7\0\14\6\3\5\14\0\3\6\1\0\11\5\1\0"+
    "\3\5\1\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\2\0"+
    "\1\6\1\5\10\6\1\0\3\6\1\0\3\6\2\0\1\5\17\0"+
    "\2\5\2\6\2\0\12\6\1\0\1\5\17\0\3\6\1\0\10\5"+
    "\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5"+
    "\2\0\1\6\1\5\6\6\3\0\2\6\2\0\3\6\10\0\2\6"+
    "\4\0\2\5\1\0\3\5\4\0\12\6\1\0\1\5\20\0\1\6"+
    "\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0"+
    "\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\10\5\1\0"+
    "\3\5\4\0\5\6\3\0\3\6\1\0\4\6\11\0\1\6\17\0"+
    "\11\6\11\0\1\5\7\0\3\6\1\0\10\5\1\0\3\5\1\0"+
    "\27\5\1\0\12\5\1\0\5\5\4\0\7\6\1\0\3\6\1\0"+
    "\4\6\7\0\2\6\11\0\2\5\4\0\12\6\22\0\2\6\1\0"+
    "\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5\2\0"+
    "\1\6\1\5\7\6\1\0\3\6\1\0\4\6\7\0\2\6\7\0"+
    "\1\5\1\0\2\5\4\0\12\6\22\0\2\6\1\0\10\5\1\0"+
    "\3\5\1\0\27\5\1\0\20\5\4\0\6\6\2\0\3\6\1\0"+
    "\4\6\11\0\1\6\10\0\2\5\4\0\12\6\22\0\2\6\1\0"+
    "\22\5\3\0\30\5\1\0\11\5\1\0\1\5\2\0\7\5\3\0"+
    "\1\6\4\0\6\6\1\0\1\6\1\0\10\6\22\0\2\6\15\0"+
    "\60\5\1\6\2\5\7\6\4\0\10\5\10\6\1\0\12\6\47\0"+
    "\2\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0"+
    "\4\5\1\0\7\5\1\0\3\5\1\0\1\5\1\0\1\5\2\0"+
    "\2\5\1\0\4\5\1\6\2\5\6\6\1\0\2\6\1\5\2\0"+
    "\5\5\1\0\1\5\1\0\6\6\2\0\12\6\2\0\2\5\42\0"+
    "\1\5\27\0\2\6\6\0\12\6\13\0\1\6\1\0\1\6\1\0"+
    "\1\6\4\0\2\6\10\5\1\0\42\5\6\0\24\6\1\0\2\6"+
    "\4\5\4\0\10\6\1\0\44\6\11\0\1\6\71\0\42\5\1\0"+
    "\5\5\1\0\2\5\1\0\7\6\3\0\4\6\6\0\12\6\6\0"+
    "\6\5\4\6\106\0\46\5\12\0\51\5\7\0\132\5\5\0\104\5"+
    "\5\0\122\5\6\0\7\5\1\0\77\5\1\0\1\5\1\0\4\5"+
    "\2\0\7\5\1\0\1\5\1\0\4\5\2\0\47\5\1\0\1\5"+
    "\1\0\4\5\2\0\37\5\1\0\1\5\1\0\4\5\2\0\7\5"+
    "\1\0\1\5\1\0\4\5\2\0\7\5\1\0\7\5\1\0\27\5"+
    "\1\0\37\5\1\0\1\5\1\0\4\5\2\0\7\5\1\0\47\5"+
    "\1\0\23\5\16\0\11\6\56\0\125\5\14\0\u026c\5\2\0\10\5"+
    "\12\0\32\5\5\0\113\5\3\0\3\5\17\0\15\5\1\0\4\5"+
    "\3\6\13\0\22\5\3\6\13\0\22\5\2\6\14\0\15\5\1\0"+
    "\3\5\1\0\2\6\14\0\64\5\40\6\3\0\1\5\3\0\2\5"+
    "\1\6\2\0\12\6\41\0\3\6\2\0\12\6\6\0\130\5\10\0"+
    "\51\5\1\6\126\0\35\5\3\0\14\6\4\0\14\6\12\0\12\6"+
    "\36\5\2\0\5\5\u038b\0\154\5\224\0\234\5\4\0\132\5\6\0"+
    "\26\5\2\0\6\5\2\0\46\5\2\0\6\5\2\0\10\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\37\5\2\0\65\5\1\0"+
    "\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5\2\0"+
    "\6\5\4\0\15\5\5\0\3\5\1\0\7\5\17\0\4\6\32\0"+
    "\5\6\20\0\2\5\23\0\1\5\13\0\4\6\6\0\6\6\1\0"+
    "\1\5\15\0\1\5\40\0\22\5\36\0\15\6\4\0\1\6\3\0"+
    "\6\6\27\0\1\5\4\0\1\5\2\0\12\5\1\0\1\5\3\0"+
    "\5\5\6\0\1\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0"+
    "\3\5\1\0\7\5\3\0\3\5\5\0\5\5\26\0\44\5\u0e81\0"+
    "\3\5\31\0\11\5\6\6\1\0\5\5\2\0\5\5\4\0\126\5"+
    "\2\0\2\6\2\0\3\5\1\0\137\5\5\0\50\5\4\0\136\5"+
    "\21\0\30\5\70\0\20\5\u0200\0\u19b6\5\112\0\u51a6\5\132\0\u048d\5"+
    "\u0773\0\u2ba4\5\u215c\0\u012e\5\2\0\73\5\225\0\7\5\14\0\5\5"+
    "\5\0\1\5\1\6\12\5\1\0\15\5\1\0\5\5\1\0\1\5"+
    "\1\0\2\5\1\0\2\5\1\0\154\5\41\0\u016b\5\22\0\100\5"+
    "\2\0\66\5\50\0\15\5\3\0\20\6\20\0\4\6\17\0\2\5"+
    "\30\0\3\5\31\0\1\5\6\0\5\5\1\0\207\5\2\0\1\6"+
    "\4\0\1\5\13\0\12\6\7\0\32\5\4\0\1\5\1\0\32\5"+
    "\12\0\132\5\3\0\6\5\2\0\6\5\2\0\6\5\2\0\3\5"+
    "\3\0\2\5\3\0\2\5\22\0\3\6\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\5\1\1\3\4"+
    "\3\6\1\1\1\4\2\3\6\0\1\6\4\4\7\0"+
    "\4\4\6\0\2\4\1\0\1\7\3\0\2\4\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[58];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\42\0\252\0\314"+
    "\0\356\0\u0110\0\u0132\0\42\0\u0154\0\u0176\0\u0198\0\u01ba"+
    "\0\u01dc\0\42\0\u01fe\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8"+
    "\0\210\0\u02ca\0\u02ec\0\u030e\0\u0330\0\u0352\0\u0374\0\u0396"+
    "\0\u03b8\0\u03da\0\u03fc\0\u041e\0\u0440\0\u0462\0\u0484\0\u04a6"+
    "\0\u04c8\0\u04ea\0\u050c\0\u052e\0\u0550\0\u0572\0\u0594\0\u05b6"+
    "\0\u05d8\0\42\0\u05fa\0\u061c\0\u063e\0\u0660\0\u0682\0\u06a4"+
    "\0\u06c6\0\u06e8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[58];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\5\1\12\3\5\1\13\11\5\1\14\1\15"+
    "\1\14\1\16\1\17\1\20\2\5\43\0\3\3\36\0"+
    "\1\4\1\21\1\22\37\4\5\0\4\5\1\0\20\5"+
    "\5\0\3\5\7\0\2\7\43\0\1\23\1\24\2\0"+
    "\1\25\2\0\1\26\1\0\1\27\1\0\1\30\21\0"+
    "\4\5\1\0\20\5\5\0\1\31\2\5\5\0\4\5"+
    "\1\0\20\5\5\0\1\5\1\32\1\33\5\0\4\5"+
    "\1\0\16\5\1\34\1\5\5\0\3\5\34\0\1\14"+
    "\42\0\1\14\42\0\1\14\10\0\4\5\1\0\4\5"+
    "\1\35\13\5\5\0\3\5\2\0\1\22\52\0\1\36"+
    "\47\0\1\37\37\0\1\40\45\0\1\41\46\0\1\42"+
    "\26\0\1\43\3\0\1\44\25\0\4\5\1\0\14\5"+
    "\1\45\3\5\5\0\3\5\5\0\4\5\1\0\1\46"+
    "\17\5\5\0\3\5\5\0\4\5\1\0\2\5\1\47"+
    "\15\5\5\0\3\5\5\0\4\5\1\0\3\5\1\50"+
    "\14\5\5\0\3\5\13\0\1\51\50\0\1\52\37\0"+
    "\1\51\41\0\1\53\35\0\1\54\43\0\1\55\51\0"+
    "\1\56\20\0\4\5\1\0\2\5\1\31\15\5\5\0"+
    "\3\5\5\0\4\5\1\0\14\5\1\57\3\5\5\0"+
    "\3\5\5\0\4\5\1\0\1\5\1\31\16\5\5\0"+
    "\3\5\5\0\4\5\1\0\7\5\1\60\10\5\5\0"+
    "\3\5\14\0\1\61\41\0\1\62\37\0\1\63\52\0"+
    "\1\64\43\0\1\65\42\0\1\53\20\0\4\5\1\0"+
    "\6\5\1\66\11\5\5\0\3\5\5\0\4\5\1\0"+
    "\20\5\5\0\1\5\1\67\1\5\15\0\1\62\50\0"+
    "\1\52\46\0\1\62\24\0\1\70\32\0\4\5\1\0"+
    "\14\5\1\31\3\5\5\0\3\5\5\0\4\5\1\0"+
    "\20\5\5\0\1\5\1\31\1\5\15\0\1\71\44\0"+
    "\1\72\50\0\1\62\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1802];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\5\1\1\11\5\1\1\11"+
    "\6\0\5\1\7\0\4\1\6\0\2\1\1\0\1\11"+
    "\3\0\2\1\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[58];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /**
     * Default constructor is needed as we will always call the yyreset
     */
    public BgmLexer() {
        super();
    }

    @Override
    public int yychar() {
        return yychar;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BgmLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public BgmLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1754) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { return token(TokenType.KEYWORD);
          }
        case 8: break;
        case 6: 
          { return token(TokenType.OPERATOR);
          }
        case 9: break;
        case 2: 
          { /* skip */
          }
        case 10: break;
        case 5: 
          { return token(TokenType.NUMBER);
          }
        case 11: break;
        case 4: 
          { return token(TokenType.IDENTIFIER);
          }
        case 12: break;
        case 3: 
          { return token(TokenType.COMMENT);
          }
        case 13: break;
        case 1: 
          { 
          }
        case 14: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
